#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import IoTVideo;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="IVAccountMgr",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// 验证码类型
typedef SWIFT_ENUM(NSInteger, IVAccountCheckCodeType, closed) {
/// 注册
  IVAccountCheckCodeTypeRegister = 1,
/// 找回密码
  IVAccountCheckCodeTypeFindBackPwd = 2,
/// 表示只是发送一条短信
  IVAccountCheckCodeTypeSendOneMsg = 3,
};


/// IotVideo 账户体系管理器
SWIFT_CLASS("_TtC12IVAccountMgr12IVAccountMgr")
@interface IVAccountMgr : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 账户管理单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) IVAccountMgr * _Nonnull shareInstance;)
+ (IVAccountMgr * _Nonnull)shareInstance SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT SWIFT_UNAVAILABLE_MSG("please use shareInstance instead");
- (id _Nonnull)mutableCopy SWIFT_WARN_UNUSED_RESULT SWIFT_UNAVAILABLE_MSG("please use shareInstance instead");
@end



enum IVAccountThirdPartyType : NSInteger;
enum IVFeedBackType : NSInteger;

@interface IVAccountMgr (SWIFT_EXTENSION(IVAccountMgr))
/// 发送手机验证码
/// \param mobile 手机号
///
/// \param mobileArea 国家码
///
/// \param checkType 验证码类型 IVAccountCheckCodeType
///
/// \param responseHandler 回调处理
///
- (void)getVerificationCodeForMobile:(NSString * _Nonnull)mobile mobileArea:(NSString * _Nonnull)mobileArea checkType:(enum IVAccountCheckCodeType)checkType responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 发送邮箱验证码
/// \param email 邮箱
///
/// \param checkType 验证码类型 IVAccountCheckCodeType
///
/// \param responseHandler 回调处理
///
- (void)getVerificationCodeForEmail:(NSString * _Nonnull)email checkType:(enum IVAccountCheckCodeType)checkType responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 手机号注册
/// \param mobile 手机号
///
/// \param mobileArea 国家区号 （中国 86）
///
/// \param password 登录密码
///
/// \param verificationCode 验证码
///
/// \param responseHandler 回调处理
///
- (void)registerByMobile:(NSString * _Nonnull)mobile mobileArea:(NSString * _Nonnull)mobileArea password:(NSString * _Nonnull)password verificationCode:(NSString * _Nonnull)verificationCode ivCid:(NSString * _Nonnull)ivCid responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 邮箱注册
/// \param email 邮箱
///
/// \param password 登录密码
///
/// \param verificationCode 验证码
///
/// \param responseHandler 回调处理
///
- (void)registerByEmail:(NSString * _Nonnull)email password:(NSString * _Nonnull)password verificationCode:(NSString * _Nonnull)verificationCode responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 注销账户
/// \param password 登录密码
///
/// \param responseHandler 回调处理
///
- (void)unregisterWithPassword:(NSString * _Nonnull)password responseHandler:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 账号登录
/// \param account 账号/邮箱/手机号
///
/// \param password 登录密码
///
/// \param responseHandler 回调处理
///
- (void)loginWithAccount:(NSString * _Nonnull)account password:(NSString * _Nonnull)password responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 第三方登录
/// \param thirdType 第三方平台
///
/// \param openId 第三方认证ID
///
/// \param extraInfo 额外信息
///
/// \param responseHandler 回调处理
///
- (void)loginWithThirdType:(enum IVAccountThirdPartyType)thirdType openId:(NSString * _Nonnull)openId extraInfo:(NSDictionary * _Nonnull)extraInfo responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 第三方绑定
/// \param thirdType 第三方平台
///
/// \param openId 第三方认证ID
///
/// \param account 账户名（账户id,手机，邮箱）
///
/// \param password 账户密码
///
/// \param responseHandler 回调处理
///
- (void)bindWithThirdType:(enum IVAccountThirdPartyType)thirdType openId:(NSString * _Nonnull)openId account:(NSString * _Nonnull)account password:(NSString * _Nonnull)password responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 解绑第三方
/// \param thirdType 第三方平台
///
/// \param responseHandler 回调处理
///
- (void)unbindWithThirdType:(enum IVAccountThirdPartyType)thirdType responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 退出登录
/// \param responseHandler 回调处理
///
- (void)logoutWithResponseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 更新用户accessToken
/// 终端用户用于更换即将过期的accessToken，根据app端处理的流程不是必须调用
/// \param responseHandler 回调处理
///
- (void)updateaccessTokenWithResponseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 获取当前用户信息
/// \param responseHandler 回调处理
///
- (void)getUserInfoWithResponseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 查找用户信息 - 手机号
/// \param mobile 手机号
///
/// \param mobileArea 地区码
///
/// \param responseHandler 回调
///
- (void)findUserInfoWithMobile:(NSString * _Nonnull)mobile mobileArea:(NSString * _Nonnull)mobileArea responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 查找用户信息 - 邮箱
/// \param email 邮箱
///
/// \param responseHandler 回调
///
- (void)findUserInfoWithEmail:(NSString * _Nonnull)email responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 查找用户信息 - 用户id
/// \param accountId 用户ID
///
/// \param responseHandler 回调
///
- (void)findUserInfoWithAccountId:(NSString * _Nonnull)accountId responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 查找用户信息
/// <ul>
///   <li>
///     终端用户通过手机查找其他用户，只支持精确匹配，不支持模糊匹配。
///   </li>
/// </ul>
/// \param account 用户账号 手机号 或 邮箱
///
/// \param mobileArea 账号为手机号时 必填
///
/// \param responseHandler 回调处理
///
- (void)findUserInfoWithAccount:(NSString * _Nonnull)account mobileArea:(NSString * _Nullable)mobileArea responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 修改用户信息
/// \param modifiedInfo 修改后的信息字典,现在支持的key
/// <ul>
///   <li>
///     nick: 昵称
///   </li>
///   <li>
///     headUrl: 头像Url字符串
///   </li>
///   <li>
///     最新支持字段key请参考文档
///   </li>
/// </ul>
///
/// \param responseHandler 回调处理
///
- (void)modifyUserInfoWithModifiedInfo:(NSDictionary<NSString *, NSString *> * _Nonnull)modifiedInfo responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 重置密码 - 手机号
/// \param mobile 手机号
///
/// \param mobileArea 国家码
///
/// \param password 密码
///
/// \param verificationCode 验证码
///
/// \param responseHandler 回调处理
///
- (void)resetPasswordByMobile:(NSString * _Nonnull)mobile mobileArea:(NSString * _Nonnull)mobileArea password:(NSString * _Nonnull)password verificationCode:(NSString * _Nonnull)verificationCode responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 重置密码 - 邮箱
/// \param email 邮箱
///
/// \param password 密码
///
/// \param verificationCode 验证码
///
/// \param responseHandler 回调处理
///
- (void)resetPasswordByEmail:(NSString * _Nonnull)email password:(NSString * _Nonnull)password verificationCode:(NSString * _Nonnull)verificationCode responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 修改密码
/// \param oldPassword 旧密码
///
/// \param newPassword 新密码
///
/// \param responseHandler 回调处理
///
- (void)modifyPasswordWithOldPassword:(NSString * _Nonnull)oldPassword newPassword:(NSString * _Nonnull)newPassword responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 获取访客列表
/// <ul>
///   <li>
///     设备主人查询设备被分享的所有用户列表
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param responseHandler 回调处理
///
- (void)getVisitorListWithDeviceId:(NSString * _Nonnull)deviceId responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 分享设备邀请 - 账号方式
/// <ul>
///   <li>
///     设备主人主动通过被分享者的用户id(IvUid)进行分享，由分享者调用。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param accountId 访客账号ID
///
/// \param responseHandler 回调处理
///
- (void)shareDeviceForVisitorWithDeviceId:(NSString * _Nonnull)deviceId accountId:(NSString * _Nonnull)accountId responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 分享设备 - 生成分享二维码token
/// <ul>
///   <li>
///     分享者生成二维码时调用此接口,把腾讯ID，用户名称、设备名称传递到IotVideo平台中，由平台返回二维码token。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param deviceName 设备名称
///
/// \param userName 用户名称
///
/// \param responseHandler 回调处理
///
- (void)shareDevieForQRCodeWithDeviceId:(NSString * _Nonnull)deviceId deviceName:(NSString * _Nonnull)deviceName userName:(NSString * _Nonnull)userName responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 分享设备邀请 - 二维码方式
/// <ul>
///   <li>
///     被分享者扫描分享者生成的二维码时调用，由被分享者调用。
///   </li>
/// </ul>
/// \param QRCodeToken 二维码内包含的 token
///
/// \param responseHandler 回调处理
///
- (void)getQRCodeSharingInfoWithQRCodeToken:(NSString * _Nonnull)QRCodeToken responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 取消分享
/// <ul>
///   <li>
///     分享者和被分享者此接口，取消设备的分享。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param accountId 主人调用时：分享者的ivUid; 分享者调用时：主人的ivUid
///
/// \param responseHandler 回调处理
///
- (void)cancelSharingWithDeviceId:(NSString * _Nonnull)deviceId accountId:(NSString * _Nonnull)accountId responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 添加设备 - 用户设备绑定
/// forceBind 说明
/// <ul>
///   <li>
///     ture: 绑定时可以踢掉设备原主人，无需解绑
///   </li>
///   <li>
///     false：未解绑的设备不能解绑
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param deviceName 默认和deviceId一致
///
/// \param forceBind 强制解绑
///
/// \param responseHandler 回调处理
///
- (void)addDeviceWithDeviceId:(NSString * _Nonnull)deviceId deviceName:(NSString * _Nullable)deviceName forceBind:(BOOL)forceBind responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 删除设备
/// \param deviceId 设备id
///
/// \param responseHandler 回调处理
///
- (void)deleteDeviceWithDeviceId:(NSString * _Nonnull)deviceId responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 查看设备列表
- (void)deviceListWithResponseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 上传日志文件流
/// \param logfile 压缩的日志文件字节流
///
/// \param responseHandler 回调
///
- (void)uploadLogWithLogfile:(NSArray<NSNumber *> * _Nonnull)logfile responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// APP获取上传到腾讯云存的cos的授权信息
/// \param responseHandler 回调
///
- (void)getCosAuthInfoWithResponseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 提交反馈信息
/// \param type 问题分类
///
/// \param content 反馈文本内容
///
/// \param imgUrl 反馈图片url
///
/// \param logUrl 反馈日志url
///
/// \param responseHandler 回调
///
- (void)feedbackWithType:(enum IVFeedBackType)type content:(NSString * _Nonnull)content imgUrl:(NSString * _Nullable)imgUrl logUrl:(NSString * _Nullable)logUrl responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 查询反馈信息列表
- (void)feedbackListWithResponseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 查询反馈详情
/// \param feedbackId 反馈id
///
/// \param responseHandler 回调
///
- (void)feedbackDetailWithFeedbackId:(NSString * _Nonnull)feedbackId responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 查询系统消息列表
/// \param currentPage 当前页
///
/// \param pageSize 每页消息数
///
/// \param responseHandler 回调
///
- (void)noticeListWithCurrentPage:(NSInteger)currentPage pageSize:(NSInteger)pageSize responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 查询系统消息详情
/// \param noticeId 消息id
///
/// \param responseHandler 回调
///
- (void)noticeDetailWithNoticeId:(NSString * _Nonnull)noticeId responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 公版app获取升级地址
/// \param responseHandler 回调
///
- (void)appUpdateInfoWithResponseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
@end

/// 第三平台类型
typedef SWIFT_ENUM(NSInteger, IVAccountThirdPartyType, closed) {
/// 微信
  IVAccountThirdPartyTypeWechat = 1,
/// FaceBook
  IVAccountThirdPartyTypeFacebook = 2,
/// QQ
  IVAccountThirdPartyTypeQq = 3,
/// 微博
  IVAccountThirdPartyTypeWeibo = 4,
};

/// 反馈类型
typedef SWIFT_ENUM(NSInteger, IVFeedBackType, closed) {
/// 连接问题
  IVFeedBackTypeConnect = 1,
/// 录像问题
  IVFeedBackTypeRecord = 2,
/// 离线问题
  IVFeedBackTypeOffline = 3,
/// 配网问题
  IVFeedBackTypeNetwork = 4,
/// 云服务问题
  IVFeedBackTypeCloud = 5,
/// 其他问题
  IVFeedBackTypeOther = 9,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import IoTVideo;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="IVAccountMgr",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// 验证码类型
typedef SWIFT_ENUM(NSInteger, IVAccountCheckCodeType, closed) {
/// 注册
  IVAccountCheckCodeTypeRegister = 1,
/// 找回密码
  IVAccountCheckCodeTypeFindBackPwd = 2,
/// 表示只是发送一条短信
  IVAccountCheckCodeTypeSendOneMsg = 3,
};


/// IotVideo 账户体系管理器
SWIFT_CLASS("_TtC12IVAccountMgr12IVAccountMgr")
@interface IVAccountMgr : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 账户管理单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) IVAccountMgr * _Nonnull shareInstance;)
+ (IVAccountMgr * _Nonnull)shareInstance SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT SWIFT_UNAVAILABLE_MSG("please use shareInstance instead");
- (id _Nonnull)mutableCopy SWIFT_WARN_UNUSED_RESULT SWIFT_UNAVAILABLE_MSG("please use shareInstance instead");
@end



enum IVAccountThirdPartyType : NSInteger;
enum IVFeedBackType : NSInteger;

@interface IVAccountMgr (SWIFT_EXTENSION(IVAccountMgr))
/// 发送手机验证码
/// \param mobile 手机号
///
/// \param mobileArea 国家码
///
/// \param checkType 验证码类型 IVAccountCheckCodeType
///
/// \param responseHandler 回调处理
///
- (void)getVerificationCodeForMobile:(NSString * _Nonnull)mobile mobileArea:(NSString * _Nonnull)mobileArea checkType:(enum IVAccountCheckCodeType)checkType responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 发送邮箱验证码
/// \param email 邮箱
///
/// \param checkType 验证码类型 IVAccountCheckCodeType
///
/// \param responseHandler 回调处理
///
- (void)getVerificationCodeForEmail:(NSString * _Nonnull)email checkType:(enum IVAccountCheckCodeType)checkType responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 手机号注册
/// \param mobile 手机号
///
/// \param mobileArea 国家区号 （中国 86）
///
/// \param password 登录密码
///
/// \param verificationCode 验证码
///
/// \param responseHandler 回调处理
///
- (void)registerByMobile:(NSString * _Nonnull)mobile mobileArea:(NSString * _Nonnull)mobileArea password:(NSString * _Nonnull)password verificationCode:(NSString * _Nonnull)verificationCode ivCid:(NSString * _Nonnull)ivCid responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 邮箱注册
/// \param email 邮箱
///
/// \param password 登录密码
///
/// \param verificationCode 验证码
///
/// \param responseHandler 回调处理
///
- (void)registerByEmail:(NSString * _Nonnull)email password:(NSString * _Nonnull)password verificationCode:(NSString * _Nonnull)verificationCode responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 注销账户
/// \param password 登录密码
///
/// \param responseHandler 回调处理
///
- (void)unregisterWithPassword:(NSString * _Nonnull)password responseHandler:(SWIFT_NOESCAPE void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 账号登录
/// \param account 账号/邮箱/手机号
///
/// \param password 登录密码
///
/// \param responseHandler 回调处理
///
- (void)loginWithAccount:(NSString * _Nonnull)account password:(NSString * _Nonnull)password responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 第三方登录
/// \param thirdType 第三方平台
///
/// \param openId 第三方认证ID
///
/// \param extraInfo 额外信息
///
/// \param responseHandler 回调处理
///
- (void)loginWithThirdType:(enum IVAccountThirdPartyType)thirdType openId:(NSString * _Nonnull)openId extraInfo:(NSDictionary * _Nonnull)extraInfo responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 第三方绑定
/// \param thirdType 第三方平台
///
/// \param openId 第三方认证ID
///
/// \param account 账户名（账户id,手机，邮箱）
///
/// \param password 账户密码
///
/// \param responseHandler 回调处理
///
- (void)bindWithThirdType:(enum IVAccountThirdPartyType)thirdType openId:(NSString * _Nonnull)openId account:(NSString * _Nonnull)account password:(NSString * _Nonnull)password responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 解绑第三方
/// \param thirdType 第三方平台
///
/// \param responseHandler 回调处理
///
- (void)unbindWithThirdType:(enum IVAccountThirdPartyType)thirdType responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 退出登录
/// \param responseHandler 回调处理
///
- (void)logoutWithResponseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 更新用户accessToken
/// 终端用户用于更换即将过期的accessToken，根据app端处理的流程不是必须调用
/// \param responseHandler 回调处理
///
- (void)updateaccessTokenWithResponseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 获取当前用户信息
/// \param responseHandler 回调处理
///
- (void)getUserInfoWithResponseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 查找用户信息 - 手机号
/// \param mobile 手机号
///
/// \param mobileArea 地区码
///
/// \param responseHandler 回调
///
- (void)findUserInfoWithMobile:(NSString * _Nonnull)mobile mobileArea:(NSString * _Nonnull)mobileArea responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 查找用户信息 - 邮箱
/// \param email 邮箱
///
/// \param responseHandler 回调
///
- (void)findUserInfoWithEmail:(NSString * _Nonnull)email responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 查找用户信息 - 用户id
/// \param accountId 用户ID
///
/// \param responseHandler 回调
///
- (void)findUserInfoWithAccountId:(NSString * _Nonnull)accountId responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 查找用户信息
/// <ul>
///   <li>
///     终端用户通过手机查找其他用户，只支持精确匹配，不支持模糊匹配。
///   </li>
/// </ul>
/// \param account 用户账号 手机号 或 邮箱
///
/// \param mobileArea 账号为手机号时 必填
///
/// \param responseHandler 回调处理
///
- (void)findUserInfoWithAccount:(NSString * _Nonnull)account mobileArea:(NSString * _Nullable)mobileArea responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 修改用户信息
/// \param modifiedInfo 修改后的信息字典,现在支持的key
/// <ul>
///   <li>
///     nick: 昵称
///   </li>
///   <li>
///     headUrl: 头像Url字符串
///   </li>
///   <li>
///     最新支持字段key请参考文档
///   </li>
/// </ul>
///
/// \param responseHandler 回调处理
///
- (void)modifyUserInfoWithModifiedInfo:(NSDictionary<NSString *, NSString *> * _Nonnull)modifiedInfo responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 重置密码 - 手机号
/// \param mobile 手机号
///
/// \param mobileArea 国家码
///
/// \param password 密码
///
/// \param verificationCode 验证码
///
/// \param responseHandler 回调处理
///
- (void)resetPasswordByMobile:(NSString * _Nonnull)mobile mobileArea:(NSString * _Nonnull)mobileArea password:(NSString * _Nonnull)password verificationCode:(NSString * _Nonnull)verificationCode responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 重置密码 - 邮箱
/// \param email 邮箱
///
/// \param password 密码
///
/// \param verificationCode 验证码
///
/// \param responseHandler 回调处理
///
- (void)resetPasswordByEmail:(NSString * _Nonnull)email password:(NSString * _Nonnull)password verificationCode:(NSString * _Nonnull)verificationCode responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 修改密码
/// \param oldPassword 旧密码
///
/// \param newPassword 新密码
///
/// \param responseHandler 回调处理
///
- (void)modifyPasswordWithOldPassword:(NSString * _Nonnull)oldPassword newPassword:(NSString * _Nonnull)newPassword responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 获取访客列表
/// <ul>
///   <li>
///     设备主人查询设备被分享的所有用户列表
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param responseHandler 回调处理
///
- (void)getVisitorListWithDeviceId:(NSString * _Nonnull)deviceId responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 分享设备邀请 - 账号方式
/// <ul>
///   <li>
///     设备主人主动通过被分享者的用户id(IvUid)进行分享，由分享者调用。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param accountId 访客账号ID
///
/// \param responseHandler 回调处理
///
- (void)shareDeviceForVisitorWithDeviceId:(NSString * _Nonnull)deviceId accountId:(NSString * _Nonnull)accountId responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 分享设备 - 生成分享二维码token
/// <ul>
///   <li>
///     分享者生成二维码时调用此接口,把腾讯ID，用户名称、设备名称传递到IotVideo平台中，由平台返回二维码token。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param deviceName 设备名称
///
/// \param userName 用户名称
///
/// \param responseHandler 回调处理
///
- (void)shareDevieForQRCodeWithDeviceId:(NSString * _Nonnull)deviceId deviceName:(NSString * _Nonnull)deviceName userName:(NSString * _Nonnull)userName responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 分享设备邀请 - 二维码方式
/// <ul>
///   <li>
///     被分享者扫描分享者生成的二维码时调用，由被分享者调用。
///   </li>
/// </ul>
/// \param QRCodeToken 二维码内包含的 token
///
/// \param responseHandler 回调处理
///
- (void)getQRCodeSharingInfoWithQRCodeToken:(NSString * _Nonnull)QRCodeToken responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 取消分享
/// <ul>
///   <li>
///     分享者和被分享者此接口，取消设备的分享。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param accountId 主人调用时：分享者的ivUid; 分享者调用时：主人的ivUid
///
/// \param responseHandler 回调处理
///
- (void)cancelSharingWithDeviceId:(NSString * _Nonnull)deviceId accountId:(NSString * _Nonnull)accountId responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 添加设备 - 用户设备绑定
/// forceBind 说明
/// <ul>
///   <li>
///     ture: 绑定时可以踢掉设备原主人，无需解绑
///   </li>
///   <li>
///     false：未解绑的设备不能解绑
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param deviceName 默认和deviceId一致
///
/// \param forceBind 强制解绑
///
/// \param responseHandler 回调处理
///
- (void)addDeviceWithDeviceId:(NSString * _Nonnull)deviceId deviceName:(NSString * _Nullable)deviceName forceBind:(BOOL)forceBind responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 删除设备
/// \param deviceId 设备id
///
/// \param responseHandler 回调处理
///
- (void)deleteDeviceWithDeviceId:(NSString * _Nonnull)deviceId responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 查看设备列表
- (void)deviceListWithResponseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 上传日志文件流
/// \param logfile 压缩的日志文件字节流
///
/// \param responseHandler 回调
///
- (void)uploadLogWithLogfile:(NSArray<NSNumber *> * _Nonnull)logfile responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// APP获取上传到腾讯云存的cos的授权信息
/// \param responseHandler 回调
///
- (void)getCosAuthInfoWithResponseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 提交反馈信息
/// \param type 问题分类
///
/// \param content 反馈文本内容
///
/// \param imgUrl 反馈图片url
///
/// \param logUrl 反馈日志url
///
/// \param responseHandler 回调
///
- (void)feedbackWithType:(enum IVFeedBackType)type content:(NSString * _Nonnull)content imgUrl:(NSString * _Nullable)imgUrl logUrl:(NSString * _Nullable)logUrl responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 查询反馈信息列表
- (void)feedbackListWithResponseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 查询反馈详情
/// \param feedbackId 反馈id
///
/// \param responseHandler 回调
///
- (void)feedbackDetailWithFeedbackId:(NSString * _Nonnull)feedbackId responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 查询系统消息列表
/// \param currentPage 当前页
///
/// \param pageSize 每页消息数
///
/// \param responseHandler 回调
///
- (void)noticeListWithCurrentPage:(NSInteger)currentPage pageSize:(NSInteger)pageSize responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 查询系统消息详情
/// \param noticeId 消息id
///
/// \param responseHandler 回调
///
- (void)noticeDetailWithNoticeId:(NSString * _Nonnull)noticeId responseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
/// 公版app获取升级地址
/// \param responseHandler 回调
///
- (void)appUpdateInfoWithResponseHandler:(IVNetworkResponseHandler _Nullable)responseHandler;
@end

/// 第三平台类型
typedef SWIFT_ENUM(NSInteger, IVAccountThirdPartyType, closed) {
/// 微信
  IVAccountThirdPartyTypeWechat = 1,
/// FaceBook
  IVAccountThirdPartyTypeFacebook = 2,
/// QQ
  IVAccountThirdPartyTypeQq = 3,
/// 微博
  IVAccountThirdPartyTypeWeibo = 4,
};

/// 反馈类型
typedef SWIFT_ENUM(NSInteger, IVFeedBackType, closed) {
/// 连接问题
  IVFeedBackTypeConnect = 1,
/// 录像问题
  IVFeedBackTypeRecord = 2,
/// 离线问题
  IVFeedBackTypeOffline = 3,
/// 配网问题
  IVFeedBackTypeNetwork = 4,
/// 云服务问题
  IVFeedBackTypeCloud = 5,
/// 其他问题
  IVFeedBackTypeOther = 9,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
