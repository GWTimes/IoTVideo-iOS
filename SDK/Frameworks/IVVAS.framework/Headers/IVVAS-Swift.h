#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="IVVAS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC5IVVAS5IVVAS")
@interface IVVAS : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 增值服务管理单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) IVVAS * _Nonnull shareInstance;)
+ (IVVAS * _Nonnull)shareInstance SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT SWIFT_UNAVAILABLE_MSG("please use shareInstance instead");
- (id _Nonnull)mutableCopy SWIFT_WARN_UNUSED_RESULT SWIFT_UNAVAILABLE_MSG("please use shareInstance instead");
@end



@class NSError;
enum IVVASServiceType : NSInteger;
enum IVVASOrderStatus : NSInteger;
enum IVVASOrderPayType : NSInteger;

@interface IVVAS (SWIFT_EXTENSION(IVVAS))
/// 热度值套餐列表查询
/// \param countryCode 国家二字码,如中国：CN
///
/// \param responseHandler 回调
///
- (void)queryPackageHotListWithCountryCode:(NSString * _Nonnull)countryCode responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 查询套餐列表
/// \param countryCode 国家二字码,如中国：CN
///
/// \param serviceType 套餐类型
/// <ul>
///   <li>
///     vss: 全时套餐
///   </li>
///   <li>
///     evs: 事件套餐
///   </li>
/// </ul>
///
/// \param responseHandler 回调
///
- (void)queryPackageListWithCountryCode:(NSString * _Nonnull)countryCode serviceType:(enum IVVASServiceType)serviceType responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 查询设备已购买服务的概要
/// <ul>
///   <li>
///     查询设备已经购买的套餐服务概要，主要是服务剩余时间（包括事件服务、全时服务）。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param responseHandler 回调
///
- (void)queryServiceOutlineWithDeviceId:(NSString * _Nonnull)deviceId responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 查询设备所有支持的服务详情列表
/// <ul>
///   <li>
///     查询设备所有支持的套餐服务详情列表，包括已激活、未激活、暂停的服务。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param responseHandler 回调
///
- (void)queryServiceListWithDeviceId:(NSString * _Nonnull)deviceId responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 生成订单
/// \param deviceId 设备id
///
/// \param packageNo 套餐编号
///
/// \param couponCode 优惠券编号
///
/// \param timezone 相对于0时区的秒数，例如东八区28800
///
/// \param responseHandler 回调
///
- (void)createOrderWithDeviceId:(NSString * _Nonnull)deviceId packageNo:(NSString * _Nonnull)packageNo couponCode:(NSString * _Nullable)couponCode timezone:(NSInteger)timezone responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 查询订单详情
/// \param orderId 订单号
///
/// \param responseHandler 回调
///
- (void)queryOrderInfoWithOrderId:(NSString * _Nonnull)orderId responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 查询订单列表
/// <ul>
///   <li>
///     终端用户查询已购买的订单列表信息。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param orderStatus 订单状态
///
/// \param responseHandler 回调
///
- (void)queryOrderListWithDeviceId:(NSString * _Nonnull)deviceId orderStatus:(enum IVVASOrderStatus)orderStatus responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 订单信息总览
/// <ul>
///   <li>
///     查看已支付订单、未支付订单和未使用的优惠券总数。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param responseHandler 回调
///
- (void)queryOrderOverviewWithDeviceId:(NSString * _Nonnull)deviceId responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 生成支付签名信息
/// \param orderId 订单id
///
/// \param payType 支付方式 wx alipay
///
/// \param responseHandler 回调
///
- (void)createPaymentWithOrderId:(NSString * _Nonnull)orderId payType:(enum IVVASOrderPayType)payType responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 获取支付结果
/// \param orderId 订单id
///
/// \param responseHandler 回调
///
- (void)queryPaymentResultWithOrderId:(NSString * _Nonnull)orderId responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 查询可转移套餐服务
- (void)queryCanTransferPackageWithDeviceId:(NSString * _Nonnull)deviceId responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 转移套餐服务
- (void)transferPackageWithDeviceId:(NSString * _Nonnull)deviceId serviceId:(NSString * _Nonnull)serviceId responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 客户购买套餐后上传到IotVideo平台的套餐购买信息
/// \param deviceId 设备TID，腾讯标识的设备id
///
/// \param packgageId 套餐id
///
/// \param type 套餐类型
/// <ul>
///   <li>
///     vss: 全时套餐
///   </li>
///   <li>
///     evs: 事件套餐
///   </li>
/// </ul>
///
/// \param startTime 套餐生效时间，uint32类型的unix时间戳
///
/// \param endTime 套餐终止时间，uint32类型的unix时间戳
///
/// \param storageLen 存储时长，单位秒
///
- (void)buyCloudPackageWithDeviceId:(NSString * _Nonnull)deviceId packgageId:(NSString * _Nonnull)packgageId type:(enum IVVASServiceType)type startTime:(NSString * _Nonnull)startTime endTime:(NSString * _Nonnull)endTime storageLen:(NSString * _Nonnull)storageLen responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 获取云存视频列表
/// <ul>
///   <li>
///     用于终端用户在云存页面中对云存服务时间内的日期进行标注，区分出是否有云存视频文件。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param timezone 相对于0时区的秒数，例如东八区28800
///
/// \param responseHandler 回调
///
- (void)getVideoListWithDeviceId:(NSString * _Nonnull)deviceId timezone:(NSInteger)timezone responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 获取云存回放m3u8列表
/// <ul>
///   <li>
///     终端用户获取云存储的m3u8列表进行回放，同时根据返回的列表对时间轴进行渲染。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param timezone 相对于0时区的秒数，例如东八区28800
///
/// \param startTime 时间戳，单位毫秒，为当天的零点零分零秒
///
/// \param endTime 时间戳，单位毫秒，为当天的零点零分零秒
///
/// \param responseHandler 回调
///
- (void)getVideoPlaybackListWithDeviceId:(NSString * _Nonnull)deviceId timezone:(NSInteger)timezone startTime:(NSString * _Nonnull)startTime endTime:(NSString * _Nonnull)endTime responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 倍速回放
/// \param deviceId 设备id
///
/// \param startTime 倍速回放的开始时间
///
/// \param speed 倍数
///
/// \param responseHandler 回调
///
- (void)videoSpeedPlayWithDeviceId:(NSString * _Nonnull)deviceId startTime:(NSString * _Nonnull)startTime speed:(NSInteger)speed responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 下载视频m3u8列表
/// <ul>
///   <li>
///     终端用户在云存页面中对一段时间内的视频文件下载。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param timezone 相对于0时区的秒数，例如东八区28800
///
/// \param dateTime 时间戳，单位毫秒，为当天的零点零分零秒
///
/// \param responseHandler 回调
///
- (void)downloadVideoWithDeviceId:(NSString * _Nonnull)deviceId timezone:(NSInteger)timezone dateTime:(NSString * _Nonnull)dateTime responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 事件列表查询
/// \param deviceId 设备id
///
/// \param startTime 事件告警开始时间
///
/// \param endTime 时间告警结束时间，当为空时，默认当天的23点59分59秒
///
/// \param lastId 倒序分页查看的最后一条记录ID
///
/// \param pageSize 每页总数
///
/// \param responseHandler 回调
///
- (void)getEventListWithDeviceId:(NSString * _Nonnull)deviceId startTime:(NSString * _Nonnull)startTime endTime:(NSString * _Nullable)endTime lastId:(NSInteger)lastId pageSize:(NSInteger)pageSize responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 事件删除（批量）
/// \param eventIds 设备id 数组
///
/// \param responseHandler 回调
///
- (void)deleteEventsWithEventIds:(NSArray<NSNumber *> * _Nonnull)eventIds responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 查看用户已经领取的优惠券列表
- (void)queryOwnedCouponListWithResponseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 推送促销活动的信息列表
- (void)queryPromotionListWithResponseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 领取优惠券，支持一键领取多张
/// \param couponIds 优惠券id数组
///
/// \param responseHandler 回调
///
- (void)receiveCouponsWithCouponIds:(NSArray<NSString *> * _Nonnull)couponIds responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 获取可用的优惠券列表
/// <ul>
///   <li>
///     支付时获取用户可使用优惠券列表。
///   </li>
/// </ul>
/// \param packageNo 套餐编号
///
/// \param responseHandler 回调
///
- (void)queryAvailableCouponListWithPackageNo:(NSString * _Nonnull)packageNo responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 查询兑换码对应的商品（优惠活动的套餐信息）信息
/// \param voucherCode 兑换码
///
/// \param responseHandler 回调
///
- (void)queryVoucherWithVoucherCode:(NSString * _Nonnull)voucherCode responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 兑换码兑换对应的商品（优惠活动的套餐信息）
/// \param deviceId 设备id
///
/// \param voucherCode 兑换码
///
/// \param timezone 时区值，相对0时区秒数
///
/// \param responseHandler 回调
///
- (void)useVoucherWithDeviceId:(NSString * _Nonnull)deviceId voucherCode:(NSString * _Nonnull)voucherCode timezone:(NSInteger)timezone responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
- (void)testP2PRequestWithResponseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
@end

/// 支付方式
typedef SWIFT_ENUM(NSInteger, IVVASOrderPayType, closed) {
  IVVASOrderPayTypeWxpay = 0,
  IVVASOrderPayTypeAlipay = 1,
};

/// 订单状态
typedef SWIFT_ENUM(NSInteger, IVVASOrderStatus, closed) {
/// 已支付
  IVVASOrderStatusPaid = 0,
/// 未支付
  IVVASOrderStatusUnpaid = 1,
/// 关闭
  IVVASOrderStatusClose = 2,
};

/// 套餐服务类型
typedef SWIFT_ENUM(NSInteger, IVVASServiceType, closed) {
/// 全时套餐
  IVVASServiceTypeVss = 1,
/// 分时套餐
  IVVASServiceTypeEvs = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="IVVAS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC5IVVAS5IVVAS")
@interface IVVAS : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 增值服务管理单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) IVVAS * _Nonnull shareInstance;)
+ (IVVAS * _Nonnull)shareInstance SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT SWIFT_UNAVAILABLE_MSG("please use shareInstance instead");
- (id _Nonnull)mutableCopy SWIFT_WARN_UNUSED_RESULT SWIFT_UNAVAILABLE_MSG("please use shareInstance instead");
@end



@class NSError;
enum IVVASServiceType : NSInteger;
enum IVVASOrderStatus : NSInteger;
enum IVVASOrderPayType : NSInteger;

@interface IVVAS (SWIFT_EXTENSION(IVVAS))
/// 热度值套餐列表查询
/// \param countryCode 国家二字码,如中国：CN
///
/// \param responseHandler 回调
///
- (void)queryPackageHotListWithCountryCode:(NSString * _Nonnull)countryCode responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 查询套餐列表
/// \param countryCode 国家二字码,如中国：CN
///
/// \param serviceType 套餐类型
/// <ul>
///   <li>
///     vss: 全时套餐
///   </li>
///   <li>
///     evs: 事件套餐
///   </li>
/// </ul>
///
/// \param responseHandler 回调
///
- (void)queryPackageListWithCountryCode:(NSString * _Nonnull)countryCode serviceType:(enum IVVASServiceType)serviceType responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 查询设备已购买服务的概要
/// <ul>
///   <li>
///     查询设备已经购买的套餐服务概要，主要是服务剩余时间（包括事件服务、全时服务）。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param responseHandler 回调
///
- (void)queryServiceOutlineWithDeviceId:(NSString * _Nonnull)deviceId responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 查询设备所有支持的服务详情列表
/// <ul>
///   <li>
///     查询设备所有支持的套餐服务详情列表，包括已激活、未激活、暂停的服务。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param responseHandler 回调
///
- (void)queryServiceListWithDeviceId:(NSString * _Nonnull)deviceId responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 生成订单
/// \param deviceId 设备id
///
/// \param packageNo 套餐编号
///
/// \param couponCode 优惠券编号
///
/// \param timezone 相对于0时区的秒数，例如东八区28800
///
/// \param responseHandler 回调
///
- (void)createOrderWithDeviceId:(NSString * _Nonnull)deviceId packageNo:(NSString * _Nonnull)packageNo couponCode:(NSString * _Nullable)couponCode timezone:(NSInteger)timezone responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 查询订单详情
/// \param orderId 订单号
///
/// \param responseHandler 回调
///
- (void)queryOrderInfoWithOrderId:(NSString * _Nonnull)orderId responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 查询订单列表
/// <ul>
///   <li>
///     终端用户查询已购买的订单列表信息。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param orderStatus 订单状态
///
/// \param responseHandler 回调
///
- (void)queryOrderListWithDeviceId:(NSString * _Nonnull)deviceId orderStatus:(enum IVVASOrderStatus)orderStatus responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 订单信息总览
/// <ul>
///   <li>
///     查看已支付订单、未支付订单和未使用的优惠券总数。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param responseHandler 回调
///
- (void)queryOrderOverviewWithDeviceId:(NSString * _Nonnull)deviceId responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 生成支付签名信息
/// \param orderId 订单id
///
/// \param payType 支付方式 wx alipay
///
/// \param responseHandler 回调
///
- (void)createPaymentWithOrderId:(NSString * _Nonnull)orderId payType:(enum IVVASOrderPayType)payType responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 获取支付结果
/// \param orderId 订单id
///
/// \param responseHandler 回调
///
- (void)queryPaymentResultWithOrderId:(NSString * _Nonnull)orderId responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 查询可转移套餐服务
- (void)queryCanTransferPackageWithDeviceId:(NSString * _Nonnull)deviceId responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 转移套餐服务
- (void)transferPackageWithDeviceId:(NSString * _Nonnull)deviceId serviceId:(NSString * _Nonnull)serviceId responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 客户购买套餐后上传到IotVideo平台的套餐购买信息
/// \param deviceId 设备TID，腾讯标识的设备id
///
/// \param packgageId 套餐id
///
/// \param type 套餐类型
/// <ul>
///   <li>
///     vss: 全时套餐
///   </li>
///   <li>
///     evs: 事件套餐
///   </li>
/// </ul>
///
/// \param startTime 套餐生效时间，uint32类型的unix时间戳
///
/// \param endTime 套餐终止时间，uint32类型的unix时间戳
///
/// \param storageLen 存储时长，单位秒
///
- (void)buyCloudPackageWithDeviceId:(NSString * _Nonnull)deviceId packgageId:(NSString * _Nonnull)packgageId type:(enum IVVASServiceType)type startTime:(NSString * _Nonnull)startTime endTime:(NSString * _Nonnull)endTime storageLen:(NSString * _Nonnull)storageLen responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 获取云存视频列表
/// <ul>
///   <li>
///     用于终端用户在云存页面中对云存服务时间内的日期进行标注，区分出是否有云存视频文件。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param timezone 相对于0时区的秒数，例如东八区28800
///
/// \param responseHandler 回调
///
- (void)getVideoListWithDeviceId:(NSString * _Nonnull)deviceId timezone:(NSInteger)timezone responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 获取云存回放m3u8列表
/// <ul>
///   <li>
///     终端用户获取云存储的m3u8列表进行回放，同时根据返回的列表对时间轴进行渲染。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param timezone 相对于0时区的秒数，例如东八区28800
///
/// \param startTime 时间戳，单位毫秒，为当天的零点零分零秒
///
/// \param endTime 时间戳，单位毫秒，为当天的零点零分零秒
///
/// \param responseHandler 回调
///
- (void)getVideoPlaybackListWithDeviceId:(NSString * _Nonnull)deviceId timezone:(NSInteger)timezone startTime:(NSString * _Nonnull)startTime endTime:(NSString * _Nonnull)endTime responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 倍速回放
/// \param deviceId 设备id
///
/// \param startTime 倍速回放的开始时间
///
/// \param speed 倍数
///
/// \param responseHandler 回调
///
- (void)videoSpeedPlayWithDeviceId:(NSString * _Nonnull)deviceId startTime:(NSString * _Nonnull)startTime speed:(NSInteger)speed responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 下载视频m3u8列表
/// <ul>
///   <li>
///     终端用户在云存页面中对一段时间内的视频文件下载。
///   </li>
/// </ul>
/// \param deviceId 设备id
///
/// \param timezone 相对于0时区的秒数，例如东八区28800
///
/// \param dateTime 时间戳，单位毫秒，为当天的零点零分零秒
///
/// \param responseHandler 回调
///
- (void)downloadVideoWithDeviceId:(NSString * _Nonnull)deviceId timezone:(NSInteger)timezone dateTime:(NSString * _Nonnull)dateTime responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 事件列表查询
/// \param deviceId 设备id
///
/// \param startTime 事件告警开始时间
///
/// \param endTime 时间告警结束时间，当为空时，默认当天的23点59分59秒
///
/// \param lastId 倒序分页查看的最后一条记录ID
///
/// \param pageSize 每页总数
///
/// \param responseHandler 回调
///
- (void)getEventListWithDeviceId:(NSString * _Nonnull)deviceId startTime:(NSString * _Nonnull)startTime endTime:(NSString * _Nullable)endTime lastId:(NSInteger)lastId pageSize:(NSInteger)pageSize responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 事件删除（批量）
/// \param eventIds 设备id 数组
///
/// \param responseHandler 回调
///
- (void)deleteEventsWithEventIds:(NSArray<NSNumber *> * _Nonnull)eventIds responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 查看用户已经领取的优惠券列表
- (void)queryOwnedCouponListWithResponseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 推送促销活动的信息列表
- (void)queryPromotionListWithResponseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 领取优惠券，支持一键领取多张
/// \param couponIds 优惠券id数组
///
/// \param responseHandler 回调
///
- (void)receiveCouponsWithCouponIds:(NSArray<NSString *> * _Nonnull)couponIds responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 获取可用的优惠券列表
/// <ul>
///   <li>
///     支付时获取用户可使用优惠券列表。
///   </li>
/// </ul>
/// \param packageNo 套餐编号
///
/// \param responseHandler 回调
///
- (void)queryAvailableCouponListWithPackageNo:(NSString * _Nonnull)packageNo responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 查询兑换码对应的商品（优惠活动的套餐信息）信息
/// \param voucherCode 兑换码
///
/// \param responseHandler 回调
///
- (void)queryVoucherWithVoucherCode:(NSString * _Nonnull)voucherCode responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
/// 兑换码兑换对应的商品（优惠活动的套餐信息）
/// \param deviceId 设备id
///
/// \param voucherCode 兑换码
///
/// \param timezone 时区值，相对0时区秒数
///
/// \param responseHandler 回调
///
- (void)useVoucherWithDeviceId:(NSString * _Nonnull)deviceId voucherCode:(NSString * _Nonnull)voucherCode timezone:(NSInteger)timezone responseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
- (void)testP2PRequestWithResponseHandler:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))responseHandler;
@end

/// 支付方式
typedef SWIFT_ENUM(NSInteger, IVVASOrderPayType, closed) {
  IVVASOrderPayTypeWxpay = 0,
  IVVASOrderPayTypeAlipay = 1,
};

/// 订单状态
typedef SWIFT_ENUM(NSInteger, IVVASOrderStatus, closed) {
/// 已支付
  IVVASOrderStatusPaid = 0,
/// 未支付
  IVVASOrderStatusUnpaid = 1,
/// 关闭
  IVVASOrderStatusClose = 2,
};

/// 套餐服务类型
typedef SWIFT_ENUM(NSInteger, IVVASServiceType, closed) {
/// 全时套餐
  IVVASServiceTypeVss = 1,
/// 分时套餐
  IVVASServiceTypeEvs = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
